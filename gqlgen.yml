# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Where should any generated dao go?
model:
  filename: cmd/app/domain/dto_graphql_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: cmd/app/resolvers
  package: resolvers
  filename_template: "{name}.resolvers.go"

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  User:
    model: github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao.User
  Product:
    model: github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao.Product
  OrderItem:
    model: github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao.OrderItem
    fields:
      product:
        resolver: true
  Order:
    model: github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao.Order
    fields:
      user:
        resolver: true
      items:
        resolver: true
