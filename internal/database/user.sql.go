// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password, createdat, updatedat, isadmin FROM user WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
		&i.Isadmin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, name, password, createdat, updatedat, isadmin FROM user WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
		&i.Isadmin,
	)
	return i, err
}

const signUp = `-- name: SignUp :exec
INSERT INTO user (id, email, name, password, isAdmin, updatedAt) 
VALUES (UUID(), ?, ?, ?, false, NOW())
`

type SignUpParams struct {
	Email    string
	Name     string
	Password sql.NullString
}

func (q *Queries) SignUp(ctx context.Context, arg SignUpParams) error {
	_, err := q.db.ExecContext(ctx, signUp, arg.Email, arg.Name, arg.Password)
	return err
}
