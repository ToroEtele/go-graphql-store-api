package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"fmt"

	model1 "github.com/ToroEtele/go-graphql-api/cmd/app/domain"
	model "github.com/ToroEtele/go-graphql-api/cmd/app/domain/dao"
	"github.com/ToroEtele/go-graphql-api/graph"
	"github.com/ToroEtele/go-graphql-api/middleware"
	"github.com/ToroEtele/go-graphql-api/tools"
)

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	dbProducts, err := r.DB.GetAllProducts(ctx)
	if err != nil {
		return nil, err
	}

	db := tools.DatabaseProductsToProducts(dbProducts)

	return db, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	dbProduct, err := r.DB.GetProductById(ctx, id)
	if err != nil {
		return nil, err
	}

	product := tools.DatabaseProductToProduct(dbProduct)

	return product, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, filter *model1.OrdersFilter, pagination *model1.Pagination) (*model1.OrdersResponse, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model1.CurrentUser, error) {
	currentUser := ctx.Value(middleware.ContextKey("user"))

	if val, ok := currentUser.(*model1.CurrentUser); ok {
		return val, nil
	} else {
		return nil, errors.New("unauthorized")
	}
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter *model1.UsersFilter, pagination *model1.Pagination) (*model1.UsersResponse, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
